/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package smartnotepad;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import java.awt.Color;
import java.awt.Font;
import java.awt.Label;
import java.awt.Toolkit;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.speech.Central;
import javax.speech.synthesis.Synthesizer;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;


/**
 *
 * @author Midnyt
 */
public class Main extends javax.swing.JFrame {
    Connection con;
    boolean selected_formatbar=false;
    boolean selected_word_bar;
    double count_words;
    boolean Voice_activator=false;
    int start_select;
    String selectedText ;
    int Slider_value;
    File selectedFile;
    String path;
    File selectedSaveFile;
    String nameOfNote;
   
    //Voice vc;
    //VoiceManager vm;
    //float pitch=0.8f;
    //float rate=0.5f;
   public static String FontName;
   public static int FontSize;
  
   VoiceManager voiceManager;
   Voice voice;
   
   
   Font cfont;
   
    
    
    /**
     * Creates new form Main
     */
    public Main() {
        
        System.out.println(FontName+"fontsize          ");
        initComponents();
        String url = "jdbc:mysql://localhost:3306/recent_open_document";
        String user = "root";
        String pass = "midnyt1234";
        try {
            
          con = DriverManager.getConnection(url, user, pass);

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        }
        if (FontName==null){
          FontName="Arial";  
            
        }
        else{
           
           FontName=Settings.FontName;
        }
        if (FontSize==0){
            FontSize=12;
        }
           else{
           FontSize=Settings.FontSize;
        }
        System.out.println(FontSize);

        cfont=new Font(FontName,Font.PLAIN,(int)FontSize);
        workArea.setFont(cfont);
        
        if (selected_formatbar==false){
            formatBar.setVisible(false);
        }
        if(Voice_activator==false){
            play.setVisible(false);
            pause.setVisible(false);
            stop.setVisible(false);
            display_wave.setVisible(false);
            mute.setVisible(false);
        }
        else{
            play.setVisible(true);
            pause.setVisible(true);
            stop.setVisible(true);
            display_wave.setVisible(false);
            mute.setVisible(false);
        }
         
        
         
        String sql_update="select * from open_document";
    try {
              PreparedStatement pst = con.prepareStatement(sql_update);
              ResultSet rs = pst.executeQuery(sql_update); 
              
              
              if (rs.next()) {
                  
                  String FirstSelectedData=rs.getString(1);
                  String []parts=FirstSelectedData.split("\\\\");
                  nameOfNote=parts[parts.length-1]; 
                  open_text_name.setText(nameOfNote);
              }}catch(Exception e){
            System.out.println("error" + e.getMessage());}
    
    }
    
        
    public void close(){
    
    WindowEvent winClosingEvent=new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu10 = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        worrd_count_switch = new javax.swing.JLabel();
        word_count_number = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pause = new javax.swing.JButton();
        play = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        display_wave = new javax.swing.JLabel();
        mute = new javax.swing.JLabel();
        Main_Slider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        display_Slider_Value = new javax.swing.JLabel();
        formatBar = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        boldBtn = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        FontFamily_Box = new javax.swing.JComboBox<>();
        FontSize_Box = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        workArea = new javax.swing.JTextPane();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu13 = new javax.swing.JMenu();
        open_text_name = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        word_bar = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        formatting_tool_bar = new javax.swing.JCheckBoxMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu9.setText("jMenu9");

        jMenu10.setText("File");
        jMenuBar3.add(jMenu10);

        jMenu11.setText("Edit");
        jMenuBar3.add(jMenu11);

        jMenuItem11.setText("jMenuItem11");

        jMenuItem12.setText("jMenuItem12");

        jMenu12.setText("jMenu12");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Smart NotePad");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        worrd_count_switch.setText("Word count:enabled");

        word_count_number.setText("words:0");

        jLabel3.setText("Formatting tool bar : Disabled");

        pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/voice/icons8_circled_pause_24px.png"))); // NOI18N
        pause.setBorder(null);
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        play.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderLight"));
        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/voice/icons8_play_button_circled_24px.png"))); // NOI18N
        play.setBorder(null);
        play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playMouseClicked(evt);
            }
        });
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        stop.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderLight"));
        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/voice/icons8_cancel_24px.png"))); // NOI18N
        stop.setBorder(null);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        display_wave.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        display_wave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/voice/icons8_audio_wave_48px.png"))); // NOI18N

        mute.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/voice/icons8_mute_24px.png"))); // NOI18N

        Main_Slider.setMaximum(200);
        Main_Slider.setMinimum(12);
        Main_Slider.setValue(12);
        Main_Slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Main_SliderMouseDragged(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Zoon Out");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Zoon In");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        display_Slider_Value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        display_Slider_Value.setText("12");
        display_Slider_Value.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(display_wave, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mute, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117)
                .addComponent(worrd_count_switch, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(word_count_number, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(display_Slider_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Main_Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(worrd_count_switch)
                        .addComponent(word_count_number)
                        .addComponent(jLabel3)
                        .addComponent(jLabel2)
                        .addComponent(display_Slider_Value))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(play, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pause, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(display_wave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(1, 1, 1))
                    .addComponent(Main_Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        formatBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bebas", "bigdey", "ds digital", "freshfont", "i found my valentine", "palace ", "poppins", "raleway", "scriptina" }));
        jComboBox1.setSelectedIndex(-1);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" }));
        jComboBox2.setSelectedIndex(-1);
        jComboBox2.setToolTipText("Change Font Size   ");

        jButton1.setBackground(new java.awt.Color(153, 153, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_underline_16px.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(153, 153, 255));
        jButton2.setForeground(new java.awt.Color(153, 153, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_italic_16px.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 153, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_align_left_16px.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 153, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_align_center_16px.png"))); // NOI18N
        jButton4.setBorder(null);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(153, 153, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_align_right_16px.png"))); // NOI18N
        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        boldBtn.setBackground(new java.awt.Color(153, 153, 255));
        boldBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_bold_16px_2.png"))); // NOI18N
        boldBtn.setBorder(null);
        boldBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldBtnActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(153, 153, 255));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_bulleted_list_16px.png"))); // NOI18N
        jButton8.setBorder(null);

        jButton5.setBackground(new java.awt.Color(153, 153, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_text_color_16px.png"))); // NOI18N
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(153, 153, 255));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Formatting tool bar/icons8_numbered_list_16px.png"))); // NOI18N
        jButton9.setBorder(null);

        FontFamily_Box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Times New Roman", "Georgia", "Palatino", "Garamond", "Arial", "Helvetica", "Verdana", "Calibri", "Tahoma", "Courier New", "Consolas", "Monaco", "Lucida Console", "Comic Sans MS", "Brush Script MT", "Monotype Corsiva" }));
        FontFamily_Box.setSelectedIndex(4);
        FontFamily_Box.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FontFamily_BoxMouseClicked(evt);
            }
        });
        FontFamily_Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontFamily_BoxActionPerformed(evt);
            }
        });

        FontSize_Box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" }));
        FontSize_Box.setSelectedIndex(4);
        FontSize_Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontSize_BoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formatBarLayout = new javax.swing.GroupLayout(formatBar);
        formatBar.setLayout(formatBarLayout);
        formatBarLayout.setHorizontalGroup(
            formatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boldBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(formatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formatBarLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(formatBarLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(FontFamily_Box, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FontSize_Box, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        formatBarLayout.setVerticalGroup(
            formatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formatBarLayout.createSequentialGroup()
                        .addGroup(formatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(boldBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addGroup(formatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(FontFamily_Box)
                                .addComponent(FontSize_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formatBarLayout.createSequentialGroup()
                        .addGroup(formatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57))))
        );

        jScrollPane2.setViewportView(jTextPane1);

        workArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                workAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(workArea);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Menu bar/icons8_file_64px.png"))); // NOI18N
        jMenu3.setText("<html>  <br> <br> <br> <br> <br> <b>File</b>      </html>");
        jMenu3.setToolTipText("<html>\n\n\n<b>File</b>\n\n\n</html>");
        jMenu3.setActionCommand("");
        jMenu3.setAlignmentY(0.3F);
        jMenu3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMenu3.setPreferredSize(new java.awt.Dimension(77, 90));

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/File/icons8_open_book_16px.png"))); // NOI18N
        jMenuItem3.setText("New Note");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenu8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/File/icons8_open_box_16px.png"))); // NOI18N
        jMenu8.setText("Open");

        jMenuItem7.setText("Browse");
        jMenuItem7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem7MouseClicked(evt);
            }
        });
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem7);

        jMenu13.setText("Recent Note");

        open_text_name.setText(open_text_name.getText());
        open_text_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_text_nameActionPerformed(evt);
            }
        });
        jMenu13.add(open_text_name);

        jMenu8.add(jMenu13);

        jMenu3.add(jMenu8);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/File/icons8_save_16px_1.png"))); // NOI18N
        jMenuItem4.setText("Save");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/File/icons8_shutdown_16px.png"))); // NOI18N
        jMenuItem5.setText("Close");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar2.add(jMenu3);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Menu bar/icons8_edit_property_64px.png"))); // NOI18N
        jMenu4.setText("<html>  <br> <br> <br> <br> <br> <b>Edit</b>      </html>");
        jMenu4.setToolTipText("<html>\n\n<b>Edit</b>\n\n\n\n</html>");
        jMenu4.setAlignmentY(0.3F);
        jMenu4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Edit/icons8_copy_16px.png"))); // NOI18N
        jMenuItem8.setText("Copy");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Edit/icons8_paste_16px.png"))); // NOI18N
        jMenuItem9.setText("Paste");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Edit/icons8_search_16px.png"))); // NOI18N
        jMenuItem10.setText("Find and Replace");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuBar2.add(jMenu4);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Menu bar/icons8_view_64px.png"))); // NOI18N
        jMenu5.setText("<html>\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<b>View</b>\n\n\n\n\n\n</html>");
        jMenu5.setToolTipText("<html>\n\n<b>View</b>\n\n\n\n</html>");
        jMenu5.setAlignmentY(0.3F);
        jMenu5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        word_bar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.ALT_DOWN_MASK));
        word_bar.setSelected(true);
        word_bar.setText("Word Count");
        word_bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                word_barActionPerformed(evt);
            }
        });
        jMenu5.add(word_bar);

        jCheckBoxMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jCheckBoxMenuItem2.setText("Auto Correction");
        jMenu5.add(jCheckBoxMenuItem2);

        formatting_tool_bar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK));
        formatting_tool_bar.setText("Formatting tool bar");
        formatting_tool_bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatting_tool_barActionPerformed(evt);
            }
        });
        jMenu5.add(formatting_tool_bar);

        jMenuBar2.add(jMenu5);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Menu bar/icons8_reading_64px.png"))); // NOI18N
        jMenu6.setText("<html>  <br> <br> <br> <br> <br> <b>Read</b>      </html>");
        jMenu6.setToolTipText("<html>\n\n<b>Read</b>\n\n\n\n</html>");
        jMenu6.setAlignmentY(0.3F);
        jMenu6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu6);

        jMenu7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon project/Menu bar/icons8_settings_3_64px_1.png"))); // NOI18N
        jMenu7.setText("<html>  <br> <br> <br> <br> <br> <b>Settings</b>      </html>");
        jMenu7.setToolTipText("<html>\n\n<b>Settings</b>\n\n\n\n</html>");
        jMenu7.setAlignmentY(0.3F);
        jMenu7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu7);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formatBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formatBar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser  = new JFileChooser();
        
        int option =fileChooser.showSaveDialog(this);
        if (option ==JFileChooser.APPROVE_OPTION ){
            try(BufferedWriter writer = new BufferedWriter(new  FileWriter(fileChooser.getSelectedFile())))
            {
            writer.write(workArea.getText());
            writer.flush();
            selectedSaveFile=fileChooser.getSelectedFile();
            JOptionPane.showMessageDialog(this, "File is been saved successfully");
            } catch (IOException ex) {
               JOptionPane.showMessageDialog(this, "Error saving File");
            }
        }
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
    JFileChooser fileChooser =new JFileChooser();
        int returnValue =fileChooser.showOpenDialog(null);
        if (returnValue ==JFileChooser.APPROVE_OPTION){
            selectedFile = fileChooser.getSelectedFile();
//            String sql_insect = "insert into open_document(previous_open) values(?)";
//            try {
//                        PreparedStatement pst = con.prepareStatement(sql_insect);
//                        pst.setString(1, selectedFile.toString());
//                        
//                        
//            }catch(Exception e){
//                System.out.println("error" + e.getMessage());}
            System.out.println("seleced file "+selectedFile);
            try(
                FileReader fis =new FileReader(selectedFile);
                BufferedReader bufferedReader = new BufferedReader(fis);
                
                    ){
            StringBuilder content = new StringBuilder(); 
            String line;
            while ((line =bufferedReader.readLine())!=null){
            content.append(line).append("\n");
            
            
            }
            
            
            workArea.setText(content.toString());
            for(int i=0;i<=workArea.getText().length()+1;i++){
                word_count_number.setText(String.valueOf(i));
                System.out.print(i);
                    }
            }catch(IOException e){
            e.printStackTrace();
            }

        }
        else{
            System.out.println("no file ");
        
        }       
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        workArea.copy();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
//        String ReplaceWord;
        String Search=workArea.getSelectedText().trim();
      String ReplaceWord=JOptionPane.showInputDialog(null, "Enter Replace Word : ");  
//        
//        
//        
    String []words=workArea.getText().split("\\s+");
    int count =0;
    for (String word :words){
        if (word.equalsIgnoreCase(Search)){
            count+=1;
            System.out.print(count);
            //String replaceAll = word.replaceAll(word, ReplaceWord);
            String update=Search.replaceAll(Search, ReplaceWord);
            System.out.print(update);
            workArea.setText(workArea.getText().replace(word, update));
           
        }
    }

//    while (workArea.getText().contains(Search)){
//        
//        String Format=Search.replace(Search, ReplaceWord);
//        
//       
//    }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void word_barActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_word_barActionPerformed
        // TODO add your hboolean selected= 
        selected_word_bar =word_bar.isSelected();
        System.out.println(selected_formatbar);
        if (selected_word_bar==true){
           
            worrd_count_switch.setText("Word count:enable");
            word_count_number.setVisible(true);
        }
        else{
            
            worrd_count_switch.setText("Word count:disable");
            word_count_number.setVisible(false);
        }
    }//GEN-LAST:event_word_barActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new Main().setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        // TODO add your handling code here:
        close();
        new Settings().setVisible(true);
    }//GEN-LAST:event_jMenu7MouseClicked

    private void jMenuItem7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem7MouseClicked
        
    }//GEN-LAST:event_jMenuItem7MouseClicked

    private void boldBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldBtnActionPerformed
        // TODO add your handling code here:
        String SelectedItem=workArea.getSelectedText().trim();
        System.out.println(SelectedItem);
        if (!SelectedItem.equals(" ") ||!SelectedItem.equals(null) ){
        StyledDocument doc =workArea.getStyledDocument();
        
        Style style =workArea.addStyle("BoldStyle", null);
        StyleConstants.setBold(style, true);
        try{
        AttributeSet attrs =doc.getCharacterElement(workArea.getSelectionStart()).getAttributes();
        boolean isBold=StyleConstants.isBold(attrs);
        boolean isItalic=StyleConstants.isItalic(attrs);
        boolean isUnderline=StyleConstants.isUnderline(attrs);
        if (isBold){
        System.out.println("undo isBold");
        
        StyleConstants.setBold(style, false);
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        
        }
        else if(isItalic||isUnderline){
        System.out.println(" isItalic");
        System.out.println(" isBold");
        
        StyleConstants.setBold(style, true);
        StyleConstants.setItalic(style, true);
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        
        }
        else{
        
        StyleConstants.setBold(style, true);
        System.out.println("about to isBold");
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        }
        doc.remove(workArea.getSelectionStart(), workArea.getSelectionEnd()-workArea.getSelectionStart());
        }catch(BadLocationException e){
        e.printStackTrace();
        }}
        else{}
        
        
        
        

    }//GEN-LAST:event_boldBtnActionPerformed

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        // TODO add your handling code here:
        try{
        Synthesizer syntheizer=Central.createSynthesizer(null);
        syntheizer.allocate();
        syntheizer.speakPlainText(workArea.getText(), null);
        }catch(Exception e){
        e.printStackTrace();
        
        }
        
        
        
        
        
//        voiceManager =VoiceManager.getInstance();
//        voice =voiceManager.getVoice("kevin16");
//        voice.
//        voice.allocate();
//        voice.setPitch(120.0f); // Adjust the pitch (range: 50.0 to 200.0)
//        voice.setPitchRange(20.0f); // Adjust the pitch range (range: 0.0 to 100.0)
//        voice.setDurationStretch(1.2f);
//        voice.speak(workArea.getText());
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    //vm= VoiceManager.getInstance();
    //vc = vm.getVoice("kevin");
       
      
   
    
    
//    vc.allocate();
//    vc.speak(workArea.getText());
//    vc.deallocate();
        if(Voice_activator==false){
        Voice_activator=true;
        play.setVisible(true);
        pause.setVisible(true);
        stop.setVisible(true);
        
        }
        else{
            Voice_activator=false;
        }
    }//GEN-LAST:event_jMenu6MouseClicked

    private void formatting_tool_barActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatting_tool_barActionPerformed
        // TODO add your handling code here:
        selected_formatbar =formatting_tool_bar.isSelected();
        System.out.println(selected_formatbar);
        if (selected_formatbar==true){
            formatBar.setVisible(true);
        }
        else{
            formatBar.setVisible(false);
        }
        
    }//GEN-LAST:event_formatting_tool_barActionPerformed
    
    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        // TODO add your handling code here:
        display_wave.setVisible(false);
        mute.setVisible(true);
        //vc.deallocate();
        
        
    }//GEN-LAST:event_pauseActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        
        
        //voice.setRate(150);
        //voice.setPitch(1);
        
        
        voice.deallocate();
        
        
 

        mute.setVisible(false);
        display_wave.setVisible(true);
        
    
    
        
    }//GEN-LAST:event_playActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        // TODO add your handling code here:
        //        Voice_activator=false;
        play.setVisible(false);
        pause.setVisible(false);
        stop.setVisible(false);
        mute.setVisible(false);
        display_wave.setVisible(false);
    }//GEN-LAST:event_stopActionPerformed

    private void workAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workAreaMousePressed
        // TODO add your handling code here:
        start_select = workArea.viewToModel(evt.getPoint());
        workArea.setCaretPosition(start_select);
    }//GEN-LAST:event_workAreaMousePressed

    private void workAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workAreaMouseReleased
        // TODO add your handling code here:
        int end = workArea.viewToModel(evt.getPoint());
                workArea.setCaretPosition(end);
               workArea.select(start_select, end);
               selectedText = workArea.getSelectedText();
               System.out.println("Selected text: " + selectedText);
                
    }//GEN-LAST:event_workAreaMouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String SelectedItem=workArea.getSelectedText().trim();
        System.out.println(SelectedItem);
        if (!SelectedItem.equals(" ") ||!SelectedItem.equals(null) ){
        StyledDocument doc =workArea.getStyledDocument();
        Style style =workArea.addStyle("ItalicStyle", null);
        
        try{
        
        
        AttributeSet attrs =doc.getCharacterElement(workArea.getSelectionStart()).getAttributes();
        boolean isItalic=StyleConstants.isItalic(attrs);
        boolean isBold=StyleConstants.isBold(attrs);
        boolean isUnderline=StyleConstants.isUnderline(attrs);
        if (isItalic){
        System.out.println("undo Italic");
        
        StyleConstants.setItalic(style, false);
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        
        }
        else if(isBold||isUnderline){
        System.out.println(" isItalic");
        System.out.println(" isBold");
        
        StyleConstants.setBold(style, true);
        StyleConstants.setItalic(style, true);
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        
        }
        else{
        
        StyleConstants.setItalic(style, true);
        System.out.println("about to isItalic");
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        }
        //SelectedItem=null;
        doc.remove(workArea.getSelectionStart(), workArea.getSelectionEnd()-workArea.getSelectionStart());
        }catch(BadLocationException e){
        e.printStackTrace();
        }}
        else{}
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void FontSize_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FontSize_BoxActionPerformed
        // TODO add your handling code here:

StyledDocument doc =workArea.getStyledDocument();
        int fontsize_choose=parseInt(FontSize_Box.getSelectedItem().toString());
        if (fontsize_choose>=12){
        String SelectedItem=workArea.getSelectedText().trim();
        int start=workArea.getSelectionStart();
        int end=workArea.getSelectionEnd();
        Style  style =workArea.addStyle("SelectedText", null);
        StyleConstants.setFontSize(style, fontsize_choose);
        doc.setCharacterAttributes(start, end-start, style, false);
        
        
        }

        
    
    }//GEN-LAST:event_FontSize_BoxActionPerformed

    private void FontFamily_BoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FontFamily_BoxMouseClicked
        // TODO add your handling code here:
        System.out.println(FontFamily_Box.getSelectedItem());
        String selectedText = workArea.getSelectedText();
        if (FontFamily_Box.getSelectedIndex()==0){
        System.out.println("if ");
        System.out.println(selectedText);
        FontName="Times New Roman"; 
        FontSize=32;
        cfont=new Font(FontName,Font.PLAIN,(int)FontSize);
        Label GetselectedText= new Label();
        GetselectedText.setText(FontName);
        GetselectedText.setFont(cfont);
        selectedText.replace(selectedText, GetselectedText.getText());
        }
        else if (FontSize_Box.getSelectedItem()=="Georgia"){
        System.out.println("hi ");
        }
    }//GEN-LAST:event_FontFamily_BoxMouseClicked

    private void Main_SliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Main_SliderMouseDragged
        // TODO add your handling code here:
       display_Slider_Value.setText(String.valueOf(Main_Slider.getValue()));
       Main_Slider.setToolTipText(String.valueOf(Main_Slider.getValue()));
       int FontSize_Dragged=Main_Slider.getValue();
       cfont=new Font(FontName,Font.PLAIN,(int)FontSize_Dragged);
       workArea.setFont(cfont);
    }//GEN-LAST:event_Main_SliderMouseDragged

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        workArea.paste();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        System.out.println("termination");
        
        if (selectedSaveFile!=null){
        path=selectedSaveFile.toString();
        }
        else if (selectedFile!=null) {
        System.out.println(selectedFile);
        path=selectedFile.toString();
        }
        else{
        System.out.println(path);
        path="";
        System.out.println(path);
        }
        
        //System.out.println(selectedSaveFile);
        String sql_update="select * from open_document";
        String sql_insect = "insert into open_document(previous_open) values(?)";
        try {
              PreparedStatement pst = con.prepareStatement(sql_update);
              ResultSet rs = pst.executeQuery(sql_update); 
              
              //System.out.println(FirstSelectedData);
              if (rs.next()) {
                  String FirstSelectedData=rs.getString(1);
                  if(path.equals("") ){
                   System.out.println("int path");
                    System.out.println(path);
                  path=FirstSelectedData;
                   System.out.println("after path");
                    System.out.println(path);
                  }
                  pst.executeUpdate("delete from open_document");
                  try {
                            PreparedStatement i_pst = con.prepareStatement(sql_insect);
                            
                            
                            i_pst.setString(1,path);
                            
                            
                            i_pst.executeUpdate();
              
              }catch(Exception e){
            System.out.println("error" + e.getMessage());}
              }
                  
              
              else{
                  System.out.println("empty");
                  try {
                            PreparedStatement i_pst = con.prepareStatement(sql_insect);
                            
                            
                            i_pst.setString(1,path);
                            
                            
                            i_pst.executeUpdate();
              
              }catch(Exception e){
            System.out.println("error" + e.getMessage());}
              }
        
        }
              catch(Exception e){
             System.out.println("error" + e.getMessage());}
        
         
        
        
        
        
        
     
         
        
    }//GEN-LAST:event_formWindowClosing

    private void open_text_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_text_nameActionPerformed
        // TODO add your handling code here:
         
         File convertStringToFile = null;
         
        String sql_update="select * from open_document";
        try {
              PreparedStatement pst = con.prepareStatement(sql_update);
              ResultSet rs = pst.executeQuery(sql_update); 
              
              
              if (rs.next()) {
                  
                  String FirstSelectedData=rs.getString(1);
                
                  
                  System.out.println(FirstSelectedData);
                  convertStringToFile=new File(FirstSelectedData);
                  
              System.out.println(convertStringToFile+"FirstSelectedData");   
              }}catch(Exception e){
            System.out.println("error" + e.getMessage());}
            System.out.println(path+"path");
            
        
        try(
                FileReader fis =new FileReader(convertStringToFile);
                BufferedReader bufferedReader = new BufferedReader(fis);
                    ){
            StringBuilder content = new StringBuilder(); 
           String line;
            while ((line =bufferedReader.readLine())!=null){
            content.append(line).append("\n");
           
            
            }
            
            workArea.setText(content.toString());
            for(int i=0;i<=workArea.getText().length()+1;i++){
                word_count_number.setText(String.valueOf(i));
                System.out.print(i);
                    }
            }catch(IOException e){
           e.printStackTrace();
            }
    }//GEN-LAST:event_open_text_nameActionPerformed

    private void workAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_workAreaKeyPressed
        // TODO add your handling code here:
        count_words=workArea.getText().length()+1;

        //System.out.println(" your total words is : "+count_words);
        if (evt.getKeyCode()==KeyEvent.VK_BACK_SPACE){
            if (count_words>=2){
                count_words= count_words-2;
                System.out.println(count_words);
                word_count_number.setText(String.valueOf(count_words));
            }
            else if (count_words==1){
                word_count_number.setText("0.0");
            }
            else{
                word_count_number.setText("0.0");
            }
        }
        else{
            //System.out.println(" your total words is : "+count_words);
            count_words= count_words;
            System.out.println(" bk not press");
            word_count_number.setText(String.valueOf(count_words));
        }
    }//GEN-LAST:event_workAreaKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String SelectedItem=workArea.getSelectedText().trim();
        System.out.println(SelectedItem);
        if (!SelectedItem.equals(" ") ||!SelectedItem.equals(null) ){
        StyledDocument doc =workArea.getStyledDocument();
        Style style =workArea.addStyle("UnderlineStyle", null);
        
        try{
        
        
        AttributeSet attrs =doc.getCharacterElement(workArea.getSelectionStart()).getAttributes();
        boolean isItalic=StyleConstants.isItalic(attrs);
        boolean isBold=StyleConstants.isBold(attrs);
       
        boolean isUnderline=StyleConstants.isUnderline(attrs);
        if (isUnderline){
        System.out.println("undo Italic");
        
        StyleConstants.setUnderline(style, false);
       
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        
        }
        else if(isBold||isItalic ){
        System.out.println(" isItalic");
        System.out.println(" isBold");
        
        StyleConstants.setBold(style, true);
        StyleConstants.setItalic(style, true);
        StyleConstants.setUnderline(style, true);
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        
        }
        else{
        
        StyleConstants.setUnderline(style, true);
        System.out.println("about to isItalic");
        doc.insertString(workArea.getSelectionStart(), SelectedItem, style);
        }
        //SelectedItem=null;
        doc.remove(workArea.getSelectionStart(), workArea.getSelectionEnd()-workArea.getSelectionStart());
        }catch(BadLocationException e){
        e.printStackTrace();
        }}
        else{}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String Selectedtext=workArea.getText();
        StyledDocument doc =workArea.getStyledDocument();
        Style leftStyle =workArea.addStyle("LeftStyle", null);
        StyleConstants.setAlignment(leftStyle, StyleConstants.ALIGN_LEFT);
        doc.setParagraphAttributes(0, doc.getLength(), leftStyle, false);
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String Selectedtext=workArea.getText();
        StyledDocument doc =workArea.getStyledDocument();
        Style centerStyle =workArea.addStyle("centerStyle", null);
        StyleConstants.setAlignment(centerStyle, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), centerStyle, false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        String Selectedtext=workArea.getText();
        StyledDocument doc =workArea.getStyledDocument();
        Style rightStyle =workArea.addStyle("RightStyle", null);
        StyleConstants.setAlignment(rightStyle, StyleConstants.ALIGN_RIGHT);
        doc.setParagraphAttributes(14, doc.getLength()-10, rightStyle, false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int result;
        Color selectedColor=null;
        JColorChooser colorChooser=new JColorChooser();
        result=JOptionPane.showOptionDialog(
                null, colorChooser,
                "Choose Font Color", 
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null, 
                null,
                null);
        if (result==JOptionPane.OK_OPTION){
        selectedColor=colorChooser.getColor();
        System.out.println(selectedColor);
        }
       StyledDocument doc =workArea.getStyledDocument();
       int start =workArea.getSelectionStart();
       int end =workArea.getSelectionEnd();
       Style style =workArea.addStyle("SelectedText", null);
       StyleConstants.setForeground(style, selectedColor);
       doc.setCharacterAttributes(start, end-start, style, false);
       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void FontFamily_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FontFamily_BoxActionPerformed
        // TODO add your handling code here:
        StyledDocument doc =workArea.getStyledDocument();
        String fontsize_choose=FontFamily_Box.getSelectedItem().toString();
        if (!fontsize_choose.equals(null)){
        String SelectedItem=workArea.getSelectedText().trim();
        int start=workArea.getSelectionStart();
        int end=workArea.getSelectionEnd();
        Style  style =workArea.addStyle("SelectedText", null);
        StyleConstants.setFontFamily(style, fontsize_choose);
        doc.setCharacterAttributes(start, end-start, style, false);
        
        
        }
    }//GEN-LAST:event_FontFamily_BoxActionPerformed

    private void playMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_playMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FontFamily_Box;
    private javax.swing.JComboBox<String> FontSize_Box;
    private javax.swing.JSlider Main_Slider;
    private javax.swing.JButton boldBtn;
    private javax.swing.JLabel display_Slider_Value;
    private javax.swing.JLabel display_wave;
    private javax.swing.JPanel formatBar;
    private javax.swing.JCheckBoxMenuItem formatting_tool_bar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel mute;
    private javax.swing.JMenuItem open_text_name;
    private javax.swing.JButton pause;
    private javax.swing.JButton play;
    private javax.swing.JButton stop;
    private javax.swing.JCheckBoxMenuItem word_bar;
    private javax.swing.JLabel word_count_number;
    private javax.swing.JTextPane workArea;
    private javax.swing.JLabel worrd_count_switch;
    // End of variables declaration//GEN-END:variables
}
